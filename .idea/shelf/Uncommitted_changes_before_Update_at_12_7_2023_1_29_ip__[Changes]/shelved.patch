Index: backend/.env
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>DB_HOST = localhost\r\nDB_DATABASE = flight_game\r\nDB_USER = root\r\nDB_PASSWORD = password\r\nFLIGHT_RANGE = 2778  # km
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/.env b/backend/.env
--- a/backend/.env	(revision afd93a82b058b003a56cfabceabbd8333ea88173)
+++ b/backend/.env	(date 1701947185114)
@@ -1,5 +1,5 @@
 DB_HOST = localhost
 DB_DATABASE = flight_game
 DB_USER = root
-DB_PASSWORD = password
+DB_PASSWORD = 3042
 FLIGHT_RANGE = 2778  # km
\ No newline at end of file
Index: backend/modules/app_functions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from geopy import distance\r\nimport helpers.database_helpers as connector\r\n\r\n\r\ndef calculate_distance(current, target):\r\n    start = connector.get_airport_by_icao(current)\r\n    end = connector.get_airport_by_icao(target)\r\n    result = distance.distance((start['latitude_deg'], start['longitude_deg']),\r\n                             (end['latitude_deg'], end['longitude_deg'])).km\r\n    return result\r\n\r\n\r\ndef check_if_inside_range(icao, flight_range):\r\n    # jos lentokenttä palaa etäisyydellä <1500nm(2778km) se hyväksytään, muuten ei\r\n    airport_list = connector.get_random_airports()\r\n    airports_in_range = []\r\n    for airport in airport_list:\r\n        dis = (calculate_distance(icao, airport['ident']))\r\n        if dis < flight_range:\r\n            airports_in_range.append(airport)\r\n    return airports_in_range\r\n\r\n\r\ndef check_if_inside_range2(user_icao, destination_icao, flight_range):\r\n    airport = connector.get_airport_by_icao(destination_icao)\r\n    distance3 = calculate_distance(user_icao, airport[\"ident\"])\r\n    if distance3 <= flight_range:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\ndef is_airport(icao):\r\n    result = connector.get_airport_by_icao(icao)\r\n    if result == 'no data':\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r\ndef is_player(screen_name):\r\n    result = connector.find_player(screen_name)\r\n    if result:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n\r\ndef all_airports_in_range(icao, flight_range):\r\n    # jos lentokenttä palaa etäisyydellä <1500nm(2778km) se hyväksytään, muuten ei\r\n    airport_list = connector.get_all_airport_icaos()\r\n    airports_in_range = []\r\n    for airport in airport_list:\r\n        dis = calculate_distance(icao, airport)\r\n        if dis < flight_range:\r\n            airports_in_range.append(airport)\r\n    return airports_in_range\r\n\r\n\r\ndef create_new_weather_goal(player_id, player_name):\r\n    weather_id = connector.get_assigned_weather_id()\r\n    weather = connector.get_weather_info(weather_id)\r\n    user = connector.find_player(player_name)\r\n    user_location = connector.get_airport_by_icao(user[\"location\"])\r\n    while weather[\"id\"] == user_location[\"weather_id\"]:\r\n        weather_id = connector.get_assigned_weather_id()\r\n        weather = connector.get_weather_info(weather_id)\r\n    # this is not our top priority, we will do it if we have time\r\n    # connector.update_airport_weather(weather['id'])\r\n    connector.update_player_goal(weather['id'], player_id)\r\n\r\n\r\ndef find_player(name):\r\n    player = connector.find_player(name)\r\n    if player != 'no data':\r\n        return player\r\n    else:\r\n        return 'no data'\r\n\r\n\r\ndef create_user(name):\r\n    airport = connector.get_random_airport()\r\n    start_weather = connector.get_random_weather_id()\r\n    resp = connector.create_user_by_name(name, airport, start_weather)\r\n    if resp != 'ERROR':\r\n        return resp\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef frustration_adder(goal_id, local_weather_id, local_region, goal_region):\r\n    frust = 0\r\n    goal = connector.get_weather_info(goal_id)\r\n    weather = connector.get_weather_info(local_weather_id)\r\n    region = local_region\r\n    if goal_region != 0:\r\n        if goal == weather and region == goal_region:\r\n            frust += 0\r\n            return frust\r\n        elif goal == weather:\r\n            frust += 5\r\n            return frust\r\n        elif region == goal_region and goal['status'] == weather['status']:\r\n            frust += 5\r\n            return frust\r\n        elif region == goal_region and goal['temperature'] == weather['temperature']:\r\n            frust += 5\r\n            return frust\r\n        elif goal['status'] == weather['status']:\r\n            frust += 10\r\n            return frust\r\n        elif goal['temperature'] == weather['temperature']:\r\n            frust += 10\r\n            return frust\r\n        elif region == goal_region:\r\n            frust += 10\r\n            return frust\r\n        else:\r\n            frust += 15\r\n            return frust\r\n    else:\r\n        if goal == weather:\r\n            frust += 0\r\n            return frust\r\n        elif goal['status'] == weather['status']:\r\n            frust += 5\r\n            return frust\r\n        elif goal['temperature'] == weather['temperature']:\r\n            frust += 5\r\n            return frust\r\n        else:\r\n            frust += 10\r\n            return frust\r\n\r\n\r\ndef change_current_airport(icao, player):\r\n    resp = connector.update_player_location(icao, player)\r\n    if resp != 'ERROR':\r\n        return True\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef find_nearest_eligible_airport(weather_id, player_location):\r\n    airports = connector.get_airports_by_weather(weather_id)\r\n    if airports != 'ERROR':\r\n        airport_list = []\r\n        for airport in airports:\r\n            distance1 = calculate_distance(player_location, airport[\"ident\"])\r\n            airport_list.append((distance1, airport[\"ident\"]))\r\n        airport_list.sort()\r\n        result = airport_list[0]\r\n        return result\r\n    else:\r\n        return \"ERROR\"\r\n\r\n\r\ndef find_nearest_eligible_airport2(weather_id, player_location, region_goal):\r\n    airports = connector.get_airports_by_weather_and_region(weather_id, region_goal)\r\n    if airports != 'ERROR':\r\n        airport_list = []\r\n        for airport in airports:\r\n            distance1 = calculate_distance(player_location, airport[\"ident\"])\r\n            airport_list.append((distance1, airport[\"ident\"]))\r\n        airport_list.sort()\r\n        result = airport_list[0]\r\n        return result\r\n    else:\r\n        resp = connector.update_region_airport_weather(weather_id, region_goal)\r\n        if resp != 'ERROR':\r\n            airports = connector.get_airports_by_weather_and_region(weather_id, region_goal)\r\n            airport_list = []\r\n            for airport in airports:\r\n                distance1 = calculate_distance(player_location, airport['ident'])\r\n                airport_list.append((distance1, airport['ident']))\r\n            airport_list.sort()\r\n            result = airport_list[0]\r\n            return result\r\n\r\n\r\ndef save_frustration(frust, player_id):\r\n    data = connector.update_player_frustration(frust, player_id)\r\n    if data == 'ERROR':\r\n        return data\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef reset_frustration(player_id):\r\n    data = connector.reset_frustration(player_id)\r\n    if data != 'ERROR':\r\n        return True\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef region_goal():\r\n    data = connector.get_random_region()\r\n    if data != 'ERROR':\r\n        return data\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef icao_input_error_check(destination, exit_button):\r\n    while not is_airport(destination):\r\n        if destination == exit_button:\r\n            return destination\r\n        print('ICAO-koodia ei ole olemassa.')\r\n        destination = input('Syötä kohdelentokenttäsi ICAO-koodi: ')\r\n    return destination\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/modules/app_functions.py b/backend/modules/app_functions.py
--- a/backend/modules/app_functions.py	(revision afd93a82b058b003a56cfabceabbd8333ea88173)
+++ b/backend/modules/app_functions.py	(date 1701947214476)
@@ -1,5 +1,5 @@
 from geopy import distance
-import helpers.database_helpers as connector
+import backend.helpers.database_helpers as connector
 
 
 def calculate_distance(current, target):
Index: frontend/app.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// const map = L.map('map').setView([44.08, -99.71], 5);\r\n// L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n//   attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n// }).addTo(map);\r\nconst map = L.map('map', maxBounds = [[25, -125], [50, -66]], minZoom =5, maxZoom = 8)\r\n.setView([44.08, -99.71], 5) ;\r\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n  attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n}).addTo(map);\r\n\r\nmap.setMaxBounds(maxBounds)\r\nmap.fitBounds(maxBounds)\r\nmap.setMinZoom(minZoom)\r\nmap.setMaxZoom(maxZoom)\r\n\r\nconst redIcon = new L.Icon({\r\niconUrl:\r\n  \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png\",\r\nshadowUrl:\r\n  \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png\",\r\niconSize: [25, 41],\r\niconAnchor: [12, 41],\r\npopupAnchor: [1, -34],\r\nshadowSize: [41, 41]\r\n});\r\nconst airportMarkers = L.featureGroup().addTo(map);\r\nconst userDialog = document.getElementById('user_dialog')\r\nconst createUserSubmit = document.getElementById('create_user_submit');\r\nconst createUserInput = document.getElementById('create_user_input');\r\nconst searchForm = document.querySelector('#single');\r\nconst input = document.querySelector('input[name=icao]');\r\nconst distanceForm = document.querySelector('#calculate-distance');\r\nconst airport1 = document.querySelector('input[name=airport1]');\r\nconst airport2 = document.querySelector('input[name=airport2]');\r\nconst flyButton = document.getElementById('fly_button');\r\nconst activeUser = {\r\n  id: ''\r\n};\r\n\r\n\r\nfunction deleteChildsOfElement(elementNode) {\r\n  while (elementNode.firstChild) {\r\n    elementNode.removeChild(elementNode.firstChild);\r\n  }\r\n}\r\n\r\n\r\nasync function createUser(){\r\n  createUserSubmit.addEventListener('click', async(evt) => {\r\n    evt.preventDefault();\r\n    try {\r\n      const player = await fetch(`http://localhost:3000/create_user?screen_name=${createUserInput.value}`);\r\n      const player_json = await player.json();\r\n      // console.log(player_json);\r\n      activeUser.id = player_json['id'];\r\n    }\r\n    catch(error) {\r\n      console.error(error);\r\n    }\r\n    activeUser.name = createUserInput.value;\r\n\r\n    // Delete form\r\n\r\n    const userDialog = document.getElementById('user_dialog');\r\n    deleteChildsOfElement(userDialog);\r\n  })\r\n}\r\n\r\n\r\nasync function createUserSelectForm(userData){\r\n  const userForm = document.createElement('form');\r\n  const userLabel = document.createElement('label');\r\n  const userSelect  = document.createElement('select');\r\n  const userButton  = document.createElement('button');\r\n  userForm.setAttribute('id','selectUser');\r\n  userLabel.innerHTML = 'Valitse käyttäjä';\r\n  userSelect.setAttribute('id','userDropDown');\r\n  userButton.setAttribute('id', 'selectUserSubmit')\r\n  userButton.setAttribute('type', 'button')\r\n  userButton.innerHTML = 'SUBMIT';\r\n  userButton.setAttribute('onclick','selectUser()')\r\n  userForm.appendChild(userLabel);\r\n  userForm.appendChild(userSelect);\r\n  userForm.appendChild(userButton);\r\n  userDialog.appendChild(userForm);\r\n  userData.forEach(user => {\r\n    const option = document.createElement('option');\r\n    option.value = user.id;\r\n    option.innerHTML = user.screen_name;\r\n    userSelect.appendChild(option)\r\n\r\n  });\r\n}\r\n\r\n\r\nasync function selectUser() {\r\n  const userSelect = document.getElementById('userDropDown');\r\n  const userID = parseInt(userSelect.value);\r\n  activeUser.id = userID;\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/getUser?id=${userID}`);\r\n    const playerData = await response.json();\r\n    console.log(playerData);\r\n    activeUser.name = playerData.screen_name;\r\n  }\r\n  catch(error) {\r\n    console.error(error);\r\n  }\r\n\r\n  // Delete form\r\n  const userDialog = document.getElementById('user_dialog');\r\n  deleteChildsOfElement(userDialog);\r\n}\r\n\r\nwindow.addEventListener('load', async function(evt) {\r\n  evt.preventDefault();\r\n  const respAir = await fetch('http://127.0.0.1:3000/airportsAll/');\r\n  const airportsData = await respAir.json();\r\n  airportsData.forEach(airport =>{\r\n    const marker = L.marker([airport.latitude_deg, airport.longitude_deg]).\r\n      addTo(map).\r\n      bindPopup(`${airport.name}(${airport.ident})`+'<br/><button id=\"fly_button\">hallo</button>');\r\n  airportMarkers.addLayer(marker);\r\n  })\r\n  const usersResp = await fetch('http://127.0.0.1:3000/getUser/all');\r\n  const userData = await usersResp.json();\r\n  // console.log('käyttäjät', userData);\r\n\r\n  // Create create/select user form\r\n\r\n  if (userData){\r\n    console.log('userData success');\r\n    await createUserSelectForm(userData);\r\n    await createUser();\r\n  } else {\r\n    console.log('no data');\r\n    await createUser();\r\n  }\r\n});\r\n\r\n\r\n// Search by ICAO ******************************\r\n\r\n\r\nsearchForm.addEventListener('submit', async (evt) => {\r\n  evt.preventDefault();\r\n  const icao = input.value;\r\n  const response = await fetch('http://127.0.0.1:3000/airport/' + icao);\r\n  const airport = await response.json();\r\n  // remove possible other markers\r\n  // add marker\r\n  const marker = L.marker([airport.latitude_deg, airport.longitude_deg], {\r\n    icon: redIcon\r\n  }).\r\n      addTo(map).\r\n      bindPopup(`${airport.name}(${airport.ident})`).\r\n      openPopup();\r\n  airportMarkers.addLayer(marker);\r\n  // pan map to selected airport\r\n  map.flyTo([airport.latitude_deg, airport.longitude_deg]);\r\n});\r\n\r\n// Calculate distance between airports\r\n\r\n\r\ndistanceForm.addEventListener('submit', async(evt) => {\r\n  evt.preventDefault();\r\n  const airport1Icao = airport1.value;\r\n  const airport2Icao = airport2.value;\r\n  const response = await fetch(`http://127.0.0.1:3000/calculateDistance?from=${airport1Icao}&to=${airport2Icao}`);\r\n  const distance =await response.json();\r\n  console.log(distance, 'distance')\r\n\r\n  const distanceResult = document.getElementById('distance_result');\r\n  const p = document.createElement('p');\r\n  p.innerText = Math.floor(distance) + 'km';\r\n  distanceResult.appendChild(p);\r\n});\r\n\r\n// Fly\r\n\r\n\r\nairportMarkers.addEventListener('click', async(evt) => {\r\n  // console.log(evt);\r\n  const airportLat = evt.latlng.lat;\r\n  const airportLng = evt.latlng.lng;\r\n  const response = await fetch(`http://127.0.0.1:3000/fly?lat=${airportLat}&lng=${airportLng}`);\r\n  const response_json = await response.json();\r\n  // console.log(response_json);\r\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/app.js b/frontend/app.js
--- a/frontend/app.js	(revision afd93a82b058b003a56cfabceabbd8333ea88173)
+++ b/frontend/app.js	(date 1701948384709)
@@ -16,12 +16,11 @@
 const redIcon = new L.Icon({
 iconUrl:
   "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png",
-shadowUrl:
-  "https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png",
+//shadowUrl:
+  //"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png",
 iconSize: [25, 41],
 iconAnchor: [12, 41],
-popupAnchor: [1, -34],
-shadowSize: [41, 41]
+popupAnchor: [1, -34]
 });
 const airportMarkers = L.featureGroup().addTo(map);
 const userDialog = document.getElementById('user_dialog')
@@ -149,15 +148,22 @@
   const airport = await response.json();
   // remove possible other markers
   // add marker
-  const marker = L.marker([airport.latitude_deg, airport.longitude_deg], {
+  const markerred = L.marker([airport.latitude_deg, airport.longitude_deg], {
     icon: redIcon
   }).
       addTo(map).
       bindPopup(`${airport.name}(${airport.ident})`).
       openPopup();
-  airportMarkers.addLayer(marker);
+
+  airportMarkers.addLayer(markerred);
+
+  markerred.getPopup().on('remove', function(){
+    airportMarkers.removeLayer(markerred);
+  });
+
+
   // pan map to selected airport
-  map.flyTo([airport.latitude_deg, airport.longitude_deg]);
+  //map.flyTo([airport.latitude_deg, airport.longitude_deg]);
 });
 
 // Calculate distance between airports
