Index: backend/.env
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>DB_HOST = localhost\r\nDB_DATABASE = flight_game\r\nDB_USER = root\r\nDB_PASSWORD = password\r\nFLIGHT_RANGE = 2778  # km
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/.env b/backend/.env
--- a/backend/.env	(revision 18ea349078ffb5baff64d813434886cffcb4753e)
+++ b/backend/.env	(date 1701692586153)
@@ -1,5 +1,5 @@
 DB_HOST = localhost
 DB_DATABASE = flight_game
 DB_USER = root
-DB_PASSWORD = password
+DB_PASSWORD = 3042
 FLIGHT_RANGE = 2778  # km
\ No newline at end of file
Index: backend/helpers/database_helpers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import helpers.connector as connector\r\n\r\nmy_cursor = connector.mydb.conn.cursor(dictionary=True, buffered=True)\r\n\r\n\r\ndef get_random_airport():\r\n    sql = f'SELECT name, type, id, ident FROM airport ORDER BY RAND()'\r\n    my_cursor.execute(sql)\r\n    result = my_cursor.fetchone()\r\n    if result:\r\n        return result\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef get_random_airports():\r\n    sql = f'SELECT ident, name, weather_id, iso_country, iso_region FROM airport ORDER BY RAND()'\r\n    my_cursor.execute(sql)\r\n    result = my_cursor.fetchall()\r\n    if result:\r\n        return result\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef get_airports_by_weather(weather_id):\r\n    sql = f'''SELECT ident, name FROM airport WHERE weather_id=%s'''\r\n    my_cursor.execute(sql, (weather_id,))\r\n    result = my_cursor.fetchall()\r\n    if result:\r\n        return result\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef get_airports_by_weather_and_region(weather_id, iso_region):\r\n    sql = f'''SELECT ident, name FROM airport WHERE weather_id=%s AND iso_region=%s'''\r\n    my_cursor.execute(sql, (weather_id, iso_region))\r\n    result = my_cursor.fetchall()\r\n    if result:\r\n        return result\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef get_airport_by_icao(icao):\r\n    sql = f'''select iso_country, ident, name, latitude_deg, longitude_deg, weather_id, iso_region\r\n     FROM airport WHERE ident = %s'''\r\n    my_cursor.execute(sql, (icao,))\r\n    result = my_cursor.fetchone()\r\n    if result:\r\n        return result\r\n    else:\r\n        return 'no data'\r\n\r\n\r\ndef get_random_weather_id():\r\n    sql = f'''SELECT id FROM weather order by RAND()'''\r\n    my_cursor.execute(sql)\r\n    result = my_cursor.fetchone()\r\n    if result:\r\n        return result\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef update_player_goal(weather_id, user_id):\r\n    sql = f'''UPDATE game SET weather_id = %s WHERE id = %s'''\r\n    values = (weather_id, user_id)\r\n    my_cursor.execute(sql, values)\r\n    connector.mydb.commit()\r\n    if my_cursor.rowcount:\r\n        return True\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef update_airport_weather(weather_id):\r\n    airports = get_random_airport()\r\n    weather = get_random_weather_id(weather_id)\r\n    sql = f'''UPDATE airport SET weather_id = %s WHERE id = %s'''\r\n    my_cursor.execute(sql, (weather['id'], airports['id']))\r\n    connector.mydb.commit()\r\n    if my_cursor.rowcount:\r\n        return True\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef find_player(name):\r\n    sql = f'''SELECT * FROM game where screen_name = %s'''\r\n    my_cursor.execute(sql, (name,))\r\n    data_res = my_cursor.fetchone()\r\n    if data_res:\r\n        return data_res\r\n    else:\r\n        return 'no data'\r\n\r\n\r\ndef get_weather_info(weather_id):\r\n    sql = f'''select * from weather where id = %s'''\r\n    my_cursor.execute(sql, (weather_id,))\r\n    return my_cursor.fetchone()\r\n\r\n\r\ndef create_user_by_name(name, start_airport, start_weather):\r\n    sql = f'''INSERT INTO game (screen_name, frustration, location, weather_id) VALUES (%s, %s, %s, %s)'''\r\n    values = (name, 0, start_airport['ident'], start_weather['id'])\r\n    my_cursor.execute(sql, values)\r\n    connector.mydb.commit()\r\n    if my_cursor.rowcount:\r\n        return True\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef reset_frustration(player_id):\r\n    sql = f'''UPDATE game SET frustration=0 WHERE id=%s'''\r\n    my_cursor.execute(sql, (player_id,))\r\n    connector.mydb.commit()\r\n    if my_cursor.rowcount:\r\n        return True\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef update_player_location(icao, player):\r\n    sql = f'''UPDATE game SET location=%s WHERE id=%s'''\r\n    val = (icao, player)\r\n    my_cursor.execute(sql, val)\r\n    connector.mydb.commit()\r\n    if my_cursor.rowcount:\r\n        return True\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef get_all_airport_icaos():\r\n    sql = 'SELECT ident FROM airport'\r\n    my_cursor.execute(sql)\r\n    a = my_cursor.fetchall()\r\n    if a:\r\n        result = []\r\n        for x in a:\r\n            result.append(x[\"ident\"])\r\n        return result\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef update_player_frustration(frust, player_id):\r\n    sql = f'''UPDATE game SET frustration=%s WHERE id=%s'''\r\n    val = (frust, player_id)\r\n    my_cursor.execute(sql, val)\r\n    connector.mydb.commit()\r\n    if my_cursor.rowcount:\r\n        return True\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef get_random_region():\r\n    sql = 'SELECT iso_region FROM airport ORDER BY RAND()'\r\n    my_cursor.execute(sql)\r\n    result = my_cursor.fetchone()\r\n    if result:\r\n        return result[\"iso_region\"]\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef get_assigned_weather_id():\r\n    sql = 'SELECT DISTINCT weather_id FROM airport ORDER BY RAND()'\r\n    my_cursor.execute(sql)\r\n    result = my_cursor.fetchone()\r\n    if result:\r\n        return result[\"weather_id\"]\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef update_region_airport_weather(weather_id, region):\r\n    sql = '''SELECT id FROM airport WHERE iso_region =%s'''\r\n    my_cursor.execute(sql, (region,))\r\n    data = my_cursor.fetchone()\r\n    new_sql = '''UPDATE airport SET weather_id = %s WHERE id = %s'''\r\n    val = (weather_id, data['id'])\r\n    my_cursor.execute(new_sql, val)\r\n    connector.mydb.commit()\r\n    if my_cursor.rowcount:\r\n        return True\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef get_airport_by_coordinates(lat, lng):\r\n    sql = '''SELECT ident FROM airport \r\n    WHERE latitude_deg= %s\r\n    AND longitude_deg= %s'''\r\n    val = (lat, lng)\r\n    my_cursor.execute(sql, val)\r\n    data = my_cursor.fetchone()\r\n    return data
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/helpers/database_helpers.py b/backend/helpers/database_helpers.py
--- a/backend/helpers/database_helpers.py	(revision 18ea349078ffb5baff64d813434886cffcb4753e)
+++ b/backend/helpers/database_helpers.py	(date 1701691216475)
@@ -1,4 +1,4 @@
-import helpers.connector as connector
+import backend.helpers.connector as connector
 
 my_cursor = connector.mydb.conn.cursor(dictionary=True, buffered=True)
 
Index: backend/modules/app_functions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from geopy import distance\r\nimport helpers.database_helpers as connector\r\n\r\n\r\ndef calculate_distance(current, target):\r\n    start = connector.get_airport_by_icao(current)\r\n    end = connector.get_airport_by_icao(target)\r\n    result = distance.distance((start['latitude_deg'], start['longitude_deg']),\r\n                             (end['latitude_deg'], end['longitude_deg'])).km\r\n    return result\r\n\r\n\r\ndef check_if_inside_range(icao, flight_range):\r\n    # jos lentokenttä palaa etäisyydellä <1500nm(2778km) se hyväksytään, muuten ei\r\n    airport_list = connector.get_random_airports()\r\n    airports_in_range = []\r\n    for airport in airport_list:\r\n        dis = (calculate_distance(icao, airport['ident']))\r\n        if dis < flight_range:\r\n            airports_in_range.append(airport)\r\n    return airports_in_range\r\n\r\n\r\ndef check_if_inside_range2(user_icao, destination_icao, flight_range):\r\n    airport = connector.get_airport_by_icao(destination_icao)\r\n    distance3 = calculate_distance(user_icao, airport[\"ident\"])\r\n    if distance3 <= flight_range:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\ndef is_airport(icao):\r\n    result = connector.get_airport_by_icao(icao)\r\n    if result == 'no data':\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r\ndef all_airports_in_range(icao, flight_range):\r\n    # jos lentokenttä palaa etäisyydellä <1500nm(2778km) se hyväksytään, muuten ei\r\n    airport_list = connector.get_all_airport_icaos()\r\n    airports_in_range = []\r\n    for airport in airport_list:\r\n        dis = calculate_distance(icao, airport)\r\n        if dis < flight_range:\r\n            airports_in_range.append(airport)\r\n    return airports_in_range\r\n\r\n\r\ndef create_new_weather_goal(player_id, player_name):\r\n    weather_id = connector.get_assigned_weather_id()\r\n    weather = connector.get_weather_info(weather_id)\r\n    user = connector.find_player(player_name)\r\n    user_location = connector.get_airport_by_icao(user[\"location\"])\r\n    while weather[\"id\"] == user_location[\"weather_id\"]:\r\n        weather_id = connector.get_assigned_weather_id()\r\n        weather = connector.get_weather_info(weather_id)\r\n    # this is not our top priority, we will do it if we have time\r\n    # connector.update_airport_weather(weather['id'])\r\n    connector.update_player_goal(weather['id'], player_id)\r\n\r\n\r\ndef find_player(name):\r\n    player = connector.find_player(name)\r\n    if player != 'no data':\r\n        return player\r\n    else:\r\n        return 'no data'\r\n\r\n\r\ndef create_user(name):\r\n    airport = connector.get_random_airport()\r\n    start_weather = connector.get_random_weather_id()\r\n    resp = connector.create_user_by_name(name, airport, start_weather)\r\n    if resp != 'ERROR':\r\n        return resp\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef frustration_adder(goal_id, local_weather_id, local_region, goal_region):\r\n    frust = 0\r\n    goal = connector.get_weather_info(goal_id)\r\n    weather = connector.get_weather_info(local_weather_id)\r\n    region = local_region\r\n    if goal_region != 0:\r\n        if goal == weather and region == goal_region:\r\n            frust += 0\r\n            return frust\r\n        elif goal == weather:\r\n            frust += 5\r\n            return frust\r\n        elif region == goal_region and goal['status'] == weather['status']:\r\n            frust += 5\r\n            return frust\r\n        elif region == goal_region and goal['temperature'] == weather['temperature']:\r\n            frust += 5\r\n            return frust\r\n        elif goal['status'] == weather['status']:\r\n            frust += 10\r\n            return frust\r\n        elif goal['temperature'] == weather['temperature']:\r\n            frust += 10\r\n            return frust\r\n        elif region == goal_region:\r\n            frust += 10\r\n            return frust\r\n        else:\r\n            frust += 15\r\n            return frust\r\n    else:\r\n        if goal == weather:\r\n            frust += 0\r\n            return frust\r\n        elif goal['status'] == weather['status']:\r\n            frust += 5\r\n            return frust\r\n        elif goal['temperature'] == weather['temperature']:\r\n            frust += 5\r\n            return frust\r\n        else:\r\n            frust += 10\r\n            return frust\r\n\r\n\r\ndef change_current_airport(icao, player):\r\n    resp = connector.update_player_location(icao, player)\r\n    if resp != 'ERROR':\r\n        return True\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef find_nearest_eligible_airport(weather_id, player_location):\r\n    airports = connector.get_airports_by_weather(weather_id)\r\n    if airports != 'ERROR':\r\n        airport_list = []\r\n        for airport in airports:\r\n            distance1 = calculate_distance(player_location, airport[\"ident\"])\r\n            airport_list.append((distance1, airport[\"ident\"]))\r\n        airport_list.sort()\r\n        result = airport_list[0]\r\n        return result\r\n    else:\r\n        return \"ERROR\"\r\n\r\n\r\ndef find_nearest_eligible_airport2(weather_id, player_location, region_goal):\r\n    airports = connector.get_airports_by_weather_and_region(weather_id, region_goal)\r\n    if airports != 'ERROR':\r\n        airport_list = []\r\n        for airport in airports:\r\n            distance1 = calculate_distance(player_location, airport[\"ident\"])\r\n            airport_list.append((distance1, airport[\"ident\"]))\r\n        airport_list.sort()\r\n        result = airport_list[0]\r\n        return result\r\n    else:\r\n        resp = connector.update_region_airport_weather(weather_id, region_goal)\r\n        if resp != 'ERROR':\r\n            airports = connector.get_airports_by_weather_and_region(weather_id, region_goal)\r\n            airport_list = []\r\n            for airport in airports:\r\n                distance1 = calculate_distance(player_location, airport['ident'])\r\n                airport_list.append((distance1, airport['ident']))\r\n            airport_list.sort()\r\n            result = airport_list[0]\r\n            return result\r\n\r\n\r\ndef save_frustration(frust, player_id):\r\n    data = connector.update_player_frustration(frust, player_id)\r\n    if data == 'ERROR':\r\n        return data\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef reset_frustration(player_id):\r\n    data = connector.reset_frustration(player_id)\r\n    if data != 'ERROR':\r\n        return True\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef region_goal():\r\n    data = connector.get_random_region()\r\n    if data != 'ERROR':\r\n        return data\r\n    else:\r\n        return 'ERROR'\r\n\r\n\r\ndef icao_input_error_check(destination, exit_button):\r\n    while not is_airport(destination):\r\n        if destination == exit_button:\r\n            return destination\r\n        print('ICAO-koodia ei ole olemassa.')\r\n        destination = input('Syötä kohdelentokenttäsi ICAO-koodi: ')\r\n    return destination\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/modules/app_functions.py b/backend/modules/app_functions.py
--- a/backend/modules/app_functions.py	(revision 18ea349078ffb5baff64d813434886cffcb4753e)
+++ b/backend/modules/app_functions.py	(date 1701691216466)
@@ -1,5 +1,5 @@
 from geopy import distance
-import helpers.database_helpers as connector
+import backend.helpers.database_helpers as connector
 
 
 def calculate_distance(current, target):
